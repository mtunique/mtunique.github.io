<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on mtunique blog</title><link>https://mtunique.com/categories/linux/</link><description>Recent content in linux on mtunique blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>mtunique</copyright><lastBuildDate>Mon, 29 Dec 2014 17:51:27 +0800</lastBuildDate><atom:link href="https://mtunique.com/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux下用户空间调试工具</title><link>https://mtunique.com/posts/linux_userspace/</link><pubDate>Mon, 29 Dec 2014 17:51:27 +0800</pubDate><guid>https://mtunique.com/posts/linux_userspace/</guid><description>根据定义，调试工具是那些那些使我们能够监测、控制和纠正其他程序的程序。我们为什么应该用调试工具呢? 在有些情况下，运行一些程序的时候我们会被卡住，我们需要明白究竟发生了什么。 例如, 我们正在运行应用程序，它产生了一些错误消息。要修复这些错误，我们应该先找出为什么产生这些错误的消息和这些错误消息从哪里产生的。 一个应用程序可能突然挂起，我们必须了解其他什么进程同时在运行。我们可能还必须弄清楚进程x挂起的时候在做什么。为了剖析这些细节， 我们需要调试工具的帮助。有几个Linux下的用户空间调试工具和技术，他们用来分析用户空间问题相当有用。他们是:
print语句 查询 (/proc, /sys etc) 跟踪 (strace/ltrace) Valgrind (memwatch) GDB 让我们一个个地了解。
1.print语句 这是一个基本的原始的调试问题的方法。 我们可以在程序中插入print语句来了解控制流和变量值。 虽然这是一个简单的技术, 但它有一些缺点的。 程序需要进行编辑以添加print语句，然后不得不重新编译，重新运行来获得输出。 如果要调试的程序相当大，这是一个耗时的方法。
2. 查询 在某些情况下，我们需要弄清楚在一个运行在内核中的进程的状态和内存映射。为了获得这些信息，我们不需要在内核中插入任何代码。 相反，可以用 /proc 文件系统。
/proc 是一个伪文件系统，系统一起启动运行就收集着运行时系统的信息 (cpu信息, 内存容量 等)。
ls /proc的输出
正如你看到的, 系统中运行的每一个进程在/proc文件系统中有一个以进程id命名的项。每个进程的细节信息可以在进程id对应的目录下的文件中获得。
ls /proc/pid的输出
解释/proc文件系统内的所有条目超出了本文的范围。一些有用的列举如下：
/proc/cmdline -&amp;gt; 内核命令行 /proc/cpuinfo -&amp;gt; 关于处理器的品牌，型号信息等 /proc/filesystems -&amp;gt; 文件系统的内核支持的信息 /proc//cmdline -&amp;gt; 命令行参数传递到当前进程 /proc//mem -&amp;gt; 当前进程持有的内存 /proc//status -&amp;gt; 当前进程的状态 3. 跟踪 strace的和ltrace是两个在Linux中用来追踪程序的执行细节的跟踪工具
strace: strace拦截和记录系统调用并且由它来接收的信号。对于用户，它显示了系统调用，传递给它们的参数和返回值。 strace的可以附着到已在运行的进程中，或到一个新的进程。它作为一个针对开发者和系统管理员的诊断，调试工具是很有用的。它也可以用来当为一个通过跟踪不同的程序调用来了解系统的工具。这个工具的好处是不需要源代码和程序不需要重新编译。</description></item></channel></rss>